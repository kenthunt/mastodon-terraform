machine:
  environment:
    TERRAFORM_DOCKER_IMAGE_NAME: hashicorp/terraform:0.9.1
  services:
    - docker
database:
  override:
    - echo "Skip database phase"
dependencies:
  override:
    - docker pull ${TERRAFORM_DOCKER_IMAGE_NAME}
    - |
      if [ -n "${AWS_ACCESS_KEY_ID}" ]; then echo AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} >> .env; fi
      if [ -n "${AWS_DEFAULT_REGION}" ]; then echo AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} >> .env; fi
      if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then echo AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} >> .env; fi
      if [ -n "${TF_VAR_aws_acm_certificate_arn}" ]; then echo TF_VAR_aws_acm_certificate_arn=${TF_VAR_aws_acm_certificate_arn} >> .env; fi
      if [ -n "${TF_VAR_aws_acm_certificate_arn_for_alb}" ]; then echo TF_VAR_aws_acm_certificate_arn_for_alb=${TF_VAR_aws_acm_certificate_arn_for_alb} >> .env; fi
      if [ -n "${TF_VAR_aws_db_instance_mastodon_instance_class}" ]; then echo TF_VAR_aws_db_instance_mastodon_instance_class=${TF_VAR_aws_db_instance_mastodon_instance_class} >> .env; fi
      if [ -n "${TF_VAR_aws_ecs_task_definition_mastodon_node_streaming_memory}" ]; then echo aws_ecs_task_definition_mastodon_node_streaming_memory=${aws_ecs_task_definition_mastodon_node_streaming_memory} >> .env; fi
      if [ -n "${TF_VAR_aws_ecs_task_definition_mastodon_rails_db_migration_memory}" ]; then echo aws_ecs_task_definition_mastodon_rails_db_migration_memory=${aws_ecs_task_definition_mastodon_rails_db_migration_memory} >> .env; fi
      if [ -n "${TF_VAR_aws_ecs_task_definition_mastodon_rails_db_set_up_memory}" ]; then echo aws_ecs_task_definition_mastodon_rails_db_set_up_memory=${aws_ecs_task_definition_mastodon_rails_db_set_up_memory} >> .env; fi
      if [ -n "${TF_VAR_aws_ecs_task_definition_mastodon_rails_puma_memory}" ]; then echo aws_ecs_task_definition_mastodon_rails_puma_memory=${aws_ecs_task_definition_mastodon_rails_puma_memory} >> .env; fi
      if [ -n "${TF_VAR_aws_ecs_task_definition_mastodon_rails_sidekiq_memory}" ]; then echo aws_ecs_task_definition_mastodon_rails_sidekiq_memory=${aws_ecs_task_definition_mastodon_rails_sidekiq_memory} >> .env; fi
      if [ -n "${TF_VAR_aws_launch_configuration_mastodon_instance_type}" ]; then echo TF_VAR_aws_launch_configuration_mastodon_instance_type=${TF_VAR_aws_launch_configuration_mastodon_instance_type} >> .env; fi
      if [ -n "${TF_VAR_mastodon_db_pass}" ]; then echo TF_VAR_mastodon_db_pass=${TF_VAR_mastodon_db_pass} >> .env; fi
      if [ -n "${TF_VAR_mastodon_docker_image_tag}" ]; then echo TF_VAR_mastodon_docker_image_tag=${TF_VAR_mastodon_docker_image_tag} >> .env; fi
      if [ -n "${TF_VAR_mastodon_otp_secret}" ]; then echo TF_VAR_mastodon_otp_secret=${TF_VAR_mastodon_otp_secret} >> .env; fi
      if [ -n "${TF_VAR_mastodon_secret_key_base}" ]; then echo TF_VAR_mastodon_secret_key_base=${TF_VAR_mastodon_secret_key_base} >> .env; fi
      if [ -n "${TF_VAR_mastodon_aws_access_key_id}" ]; then echo TF_VAR_mastodon_aws_access_key_id=${TF_VAR_mastodon_aws_access_key_id} >> .env; fi
      if [ -n "${TF_VAR_mastodon_aws_secret_access_key}" ]; then echo TF_VAR_mastodon_aws_secret_access_key=${TF_VAR_mastodon_aws_secret_access_key} >> .env; fi
      if [ -n "${TF_VAR_mastodon_db_name}" ]; then echo TF_VAR_mastodon_db_name=${TF_VAR_mastodon_db_name} >> .env; fi
      if [ -n "${TF_VAR_mastodon_db_user}" ]; then echo TF_VAR_mastodon_db_user=${TF_VAR_mastodon_db_user} >> .env; fi
      if [ -n "${TF_VAR_mastodon_default_locale}" ]; then echo TF_VAR_mastodon_default_locale=${TF_VAR_mastodon_default_locale} >> .env; fi
      if [ -n "${TF_VAR_mastodon_email_domain_blacklist}" ]; then echo TF_VAR_mastodon_email_domain_blacklist=${TF_VAR_mastodon_email_domain_blacklist} >> .env; fi
      if [ -n "${TF_VAR_mastodon_email_domain_whitelist}" ]; then echo TF_VAR_mastodon_email_domain_whitelist=${TF_VAR_mastodon_email_domain_whitelist} >> .env; fi
      if [ -n "${TF_VAR_mastodon_local_domain}" ]; then echo TF_VAR_mastodon_local_domain=${TF_VAR_mastodon_local_domain} >> .env; fi
      if [ -n "${TF_VAR_mastodon_node_streaming_api_base_url}" ]; then echo TF_VAR_mastodon_node_streaming_api_base_url=${TF_VAR_mastodon_node_streaming_api_base_url} >> .env; fi
      if [ -n "${TF_VAR_mastodon_node_streaming_cluster_num}" ]; then echo TF_VAR_mastodon_node_streaming_cluster_num=${TF_VAR_mastodon_node_streaming_cluster_num} >> .env; fi
      if [ -n "${TF_VAR_mastodon_paperclip_root_path}" ]; then echo TF_VAR_mastodon_paperclip_root_path=${TF_VAR_mastodon_paperclip_root_path} >> .env; fi
      if [ -n "${TF_VAR_mastodon_paperclip_root_url}" ]; then echo TF_VAR_mastodon_paperclip_root_url=${TF_VAR_mastodon_paperclip_root_url} >> .env; fi
      if [ -n "${TF_VAR_mastodon_paperclip_secret}" ]; then echo TF_VAR_mastodon_paperclip_secret=${TF_VAR_mastodon_paperclip_secret} >> .env; fi
      if [ -n "${TF_VAR_mastodon_prepared_statements}" ]; then echo TF_VAR_mastodon_prepared_statements=${TF_VAR_mastodon_prepared_statements} >> .env; fi
      if [ -n "${TF_VAR_mastodon_s3_bucket}" ]; then echo TF_VAR_mastodon_s3_bucket=${TF_VAR_mastodon_s3_bucket} >> .env; fi
      if [ -n "${TF_VAR_mastodon_s3_cloudfront_host}" ]; then echo TF_VAR_mastodon_s3_cloudfront_host=${TF_VAR_mastodon_s3_cloudfront_host} >> .env; fi
      if [ -n "${TF_VAR_mastodon_s3_enabled}" ]; then echo TF_VAR_mastodon_s3_enabled=${TF_VAR_mastodon_s3_enabled} >> .env; fi
      if [ -n "${TF_VAR_mastodon_s3_endpoint}" ]; then echo TF_VAR_mastodon_s3_endpoint=${TF_VAR_mastodon_s3_endpoint} >> .env; fi
      if [ -n "${TF_VAR_mastodon_s3_hostname}" ]; then echo TF_VAR_mastodon_s3_hostname=${TF_VAR_mastodon_s3_hostname} >> .env; fi
      if [ -n "${TF_VAR_mastodon_s3_protocol}" ]; then echo TF_VAR_mastodon_s3_protocol=${TF_VAR_mastodon_s3_protocol} >> .env; fi
      if [ -n "${TF_VAR_mastodon_s3_region}" ]; then echo TF_VAR_mastodon_s3_region=${TF_VAR_mastodon_s3_region} >> .env; fi
      if [ -n "${TF_VAR_mastodon_single_user_mode}" ]; then echo TF_VAR_mastodon_single_user_mode=${TF_VAR_mastodon_single_user_mode} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_auth_method}" ]; then echo TF_VAR_mastodon_smtp_auth_method=${TF_VAR_mastodon_smtp_auth_method} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_delivery_method}" ]; then echo TF_VAR_mastodon_smtp_delivery_method=${TF_VAR_mastodon_smtp_delivery_method} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_domain}" ]; then echo TF_VAR_mastodon_smtp_domain=${TF_VAR_mastodon_smtp_domain} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_enable_starttls_auto}" ]; then echo TF_VAR_mastodon_smtp_enable_starttls_auto=${TF_VAR_mastodon_smtp_enable_starttls_auto} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_from_address}" ]; then echo TF_VAR_mastodon_smtp_from_address=${TF_VAR_mastodon_smtp_from_address} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_login}" ]; then echo TF_VAR_mastodon_smtp_login=${TF_VAR_mastodon_smtp_login} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_openssl_verify_mode}" ]; then echo TF_VAR_mastodon_smtp_openssl_verify_mode=${TF_VAR_mastodon_smtp_openssl_verify_mode} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_password}" ]; then echo TF_VAR_mastodon_smtp_password=${TF_VAR_mastodon_smtp_password} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_port}" ]; then echo TF_VAR_mastodon_smtp_port=${TF_VAR_mastodon_smtp_port} >> .env; fi
      if [ -n "${TF_VAR_mastodon_smtp_server}" ]; then echo TF_VAR_mastodon_smtp_server=${TF_VAR_mastodon_smtp_server} >> .env; fi
    - >
      docker run --env-file .env --volume $(pwd)/terraform:/app/terraform --workdir /app/terraform ${TERRAFORM_DOCKER_IMAGE_NAME} init \
        -backend=true \
        -backend-config="bucket=${AWS_S3_BUCKET_TERRAFORM_STATE_NAME}" \
        -backend-config="key=${AWS_S3_BUCKET_TERRAFORM_STATE_KEY}" \
        -backend-config="region=${AWS_DEFAULT_REGION}"
deployment:
  master:
    branch: master
    commands:
      - docker run --env-file .env --volume $(pwd)/terraform:/app/terraform --workdir /app/terraform ${TERRAFORM_DOCKER_IMAGE_NAME} apply
test:
  override:
    - docker run --env-file .env --volume $(pwd)/terraform:/app/terraform --workdir /app/terraform ${TERRAFORM_DOCKER_IMAGE_NAME} plan
